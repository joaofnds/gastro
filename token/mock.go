// Code generated by MockGen. DO NOT EDIT.
// Source: ./token/service.go

// Package mock_token is a generated GoMock package.
package token

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockIDGenerator is a mock of IDGenerator interface.
type MockIDGenerator struct {
	ctrl     *gomock.Controller
	recorder *MockIDGeneratorMockRecorder
}

// MockIDGeneratorMockRecorder is the mock recorder for MockIDGenerator.
type MockIDGeneratorMockRecorder struct {
	mock *MockIDGenerator
}

// NewMockIDGenerator creates a new mock instance.
func NewMockIDGenerator(ctrl *gomock.Controller) *MockIDGenerator {
	mock := &MockIDGenerator{ctrl: ctrl}
	mock.recorder = &MockIDGeneratorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIDGenerator) EXPECT() *MockIDGeneratorMockRecorder {
	return m.recorder
}

// NewID mocks base method.
func (m *MockIDGenerator) NewID() ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NewID")
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// NewID indicates an expected call of NewID.
func (mr *MockIDGeneratorMockRecorder) NewID() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewID", reflect.TypeOf((*MockIDGenerator)(nil).NewID))
}

// MockEncrypter is a mock of Encrypter interface.
type MockEncrypter struct {
	ctrl     *gomock.Controller
	recorder *MockEncrypterMockRecorder
}

// MockEncrypterMockRecorder is the mock recorder for MockEncrypter.
type MockEncrypterMockRecorder struct {
	mock *MockEncrypter
}

// NewMockEncrypter creates a new mock instance.
func NewMockEncrypter(ctrl *gomock.Controller) *MockEncrypter {
	mock := &MockEncrypter{ctrl: ctrl}
	mock.recorder = &MockEncrypterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockEncrypter) EXPECT() *MockEncrypterMockRecorder {
	return m.recorder
}

// Decrypt mocks base method.
func (m *MockEncrypter) Decrypt(arg0 []byte) ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Decrypt", arg0)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Decrypt indicates an expected call of Decrypt.
func (mr *MockEncrypterMockRecorder) Decrypt(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Decrypt", reflect.TypeOf((*MockEncrypter)(nil).Decrypt), arg0)
}

// Encrypt mocks base method.
func (m *MockEncrypter) Encrypt(arg0 []byte) ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Encrypt", arg0)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Encrypt indicates an expected call of Encrypt.
func (mr *MockEncrypterMockRecorder) Encrypt(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Encrypt", reflect.TypeOf((*MockEncrypter)(nil).Encrypt), arg0)
}

// MockEncoder is a mock of Encoder interface.
type MockEncoder struct {
	ctrl     *gomock.Controller
	recorder *MockEncoderMockRecorder
}

// MockEncoderMockRecorder is the mock recorder for MockEncoder.
type MockEncoderMockRecorder struct {
	mock *MockEncoder
}

// NewMockEncoder creates a new mock instance.
func NewMockEncoder(ctrl *gomock.Controller) *MockEncoder {
	mock := &MockEncoder{ctrl: ctrl}
	mock.recorder = &MockEncoderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockEncoder) EXPECT() *MockEncoderMockRecorder {
	return m.recorder
}

// Decode mocks base method.
func (m *MockEncoder) Decode(arg0 []byte) ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Decode", arg0)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Decode indicates an expected call of Decode.
func (mr *MockEncoderMockRecorder) Decode(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Decode", reflect.TypeOf((*MockEncoder)(nil).Decode), arg0)
}

// Encode mocks base method.
func (m *MockEncoder) Encode(arg0 []byte) ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Encode", arg0)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Encode indicates an expected call of Encode.
func (mr *MockEncoderMockRecorder) Encode(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Encode", reflect.TypeOf((*MockEncoder)(nil).Encode), arg0)
}

// MockTokenInstrumentation is a mock of TokenInstrumentation interface.
type MockTokenInstrumentation struct {
	ctrl     *gomock.Controller
	recorder *MockTokenInstrumentationMockRecorder
}

// MockTokenInstrumentationMockRecorder is the mock recorder for MockTokenInstrumentation.
type MockTokenInstrumentationMockRecorder struct {
	mock *MockTokenInstrumentation
}

// NewMockTokenInstrumentation creates a new mock instance.
func NewMockTokenInstrumentation(ctrl *gomock.Controller) *MockTokenInstrumentation {
	mock := &MockTokenInstrumentation{ctrl: ctrl}
	mock.recorder = &MockTokenInstrumentationMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTokenInstrumentation) EXPECT() *MockTokenInstrumentationMockRecorder {
	return m.recorder
}

// FailedToCreateToken mocks base method.
func (m *MockTokenInstrumentation) FailedToCreateToken(err error) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "FailedToCreateToken", err)
}

// FailedToCreateToken indicates an expected call of FailedToCreateToken.
func (mr *MockTokenInstrumentationMockRecorder) FailedToCreateToken(err interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FailedToCreateToken", reflect.TypeOf((*MockTokenInstrumentation)(nil).FailedToCreateToken), err)
}

// FailedToDecryptToken mocks base method.
func (m *MockTokenInstrumentation) FailedToDecryptToken(err error) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "FailedToDecryptToken", err)
}

// FailedToDecryptToken indicates an expected call of FailedToDecryptToken.
func (mr *MockTokenInstrumentationMockRecorder) FailedToDecryptToken(err interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FailedToDecryptToken", reflect.TypeOf((*MockTokenInstrumentation)(nil).FailedToDecryptToken), err)
}

// TokenCreated mocks base method.
func (m *MockTokenInstrumentation) TokenCreated() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "TokenCreated")
}

// TokenCreated indicates an expected call of TokenCreated.
func (mr *MockTokenInstrumentationMockRecorder) TokenCreated() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TokenCreated", reflect.TypeOf((*MockTokenInstrumentation)(nil).TokenCreated))
}

// TokenDecrypted mocks base method.
func (m *MockTokenInstrumentation) TokenDecrypted() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "TokenDecrypted")
}

// TokenDecrypted indicates an expected call of TokenDecrypted.
func (mr *MockTokenInstrumentationMockRecorder) TokenDecrypted() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TokenDecrypted", reflect.TypeOf((*MockTokenInstrumentation)(nil).TokenDecrypted))
}
